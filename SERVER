-- Refactored FPS Shooting System - Server Script
-- Combines all player state into a single object per player

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

local RemoteEvents = ReplicatedStorage.RemoteEvent
local Shooting = RemoteEvents.Shooting
local Reloading = RemoteEvents.Reloading
local ChangeGun = RemoteEvents.ChangeGun
local StateHandler = RemoteEvents.StateHandler

local FastCast = require(ReplicatedStorage.Modules.FastCastRedux)
local caster = FastCast.new()
local FastCastBehavior = FastCast.newBehavior()

local hk33 = require(ReplicatedStorage.Modules["H&K HK33"])
local m590a1 = require(ReplicatedStorage.Modules["MOSSBERG M590A1"])
local m98b = require(ReplicatedStorage.Modules["BARRETT M98B"])

-- Use variables as keys for easy reference
local Guns = {
	["H&K HK33"] = hk33,
	["MOSSBERG M590A1"] = m590a1,
	["BARRETT M98B"] = m98b
}


local FPSGun = require(ReplicatedStorage.Modules.FPS.FPSGun)
local FPSPlayer = require(ReplicatedStorage.Modules.FPS.FPSPlayer)
local UnifiedFPSSystem = require(ReplicatedStorage.Modules.FPS.UnifiedFPSSystem)
local Systems = UnifiedFPSSystem.initialize()
local Config = UnifiedFPSSystem.Config

for name, module in pairs(Guns) do
	Config.WEAPONS[name] = {
		Name = name,
		Damage = { Body = module.Bodyshot, Head = module.Headshot },
		FireRate = module.FireRate,
		Ammo = module.Magazine,
		MaxAmmo = module.Magazine,
		BulletsPerShot = module.BulletPerShot,
		ReloadingTime = module.ReloadingTime,
		AimingValues = module.AimingValues,
		Recoil = module.Recoil,
		SpreadAngles = {
			AimingSpreadAngle = module.AimingSpreadAngle,
			SpreadAngle = module.SpreadAngle,
			FiringSpreadAngle = module.FiringSpreadAngle,
			MaxSpreadAngle = module.MaxSpreadAngle,
			AngleReset = module.AngleReset,
			CurrentSpreadAngle = module.SpreadAngle
		},
		CanAim = module.CanAim
	}
end

FastCast.VisualizeCasts = true

RemoteEvents.Shooting.OnServerEvent:Connect(function(player, muzzlePos, weaponName, direction,ammo)
	Systems.shootingSystem:handleShootRequest(
		player, muzzlePos, weaponName, direction, ammo
	)
end)

RemoteEvents.ChangeGun.OnServerEvent:Connect(function(player, weaponName,currentweapon)
	local validation = Systems.validationPipeline:validate(player, "changeWeapon", {
		weaponName = weaponName
	})

	if validation.success then
		Systems.playerManager:updatePlayerData(player, "combat", "activeWeapon", weaponName)
		Systems.playerManager:updatePlayerData(player, "combat", "lastWeaponSwitch", os.clock())
	end 
end)
RemoteEvents.StateHandler.OnServerEvent:Connect(function(player, action, context)
	if action == "shootStart" then
		-- Handle shoot start logic
		-- context = weaponName
		Systems.playerManager:updatePlayerData(player,"combat","isShooting",true)
	elseif action == "shootEnd" then
		-- Handle shoot end logic
		-- context = weaponName
		Systems.playerManager:updatePlayerData(player,"combat","isShooting",false)
	elseif action == "aiming" then
		Systems.playerManager.eventBus.emit("aiming",player,true,context.weaponName)
		Systems.playerManager:updatePlayerData(player,"combat","isAiming",true)
	elseif action == "stop aiming" then
		Systems.playerManager:updatePlayerData(player,"combat","isShooting",false)
		Systems.playerManager.eventBus.emit("stop aiming",player,false,context.weaponName)
	elseif action == "reload" then
		Systems.playerManager:updatePlayerData(player, "combat", "isReloading", true)
		Systems.playerManager.eventBus.emit("reload",player,context.weaponName,context.ammo)
	else
		warn("Unknown state action: " .. tostring(action))
	end
end)


