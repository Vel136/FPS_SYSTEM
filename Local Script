--[[
	FPS Client System - LocalScript
	Handles viewmodel rendering, input processing, weapon switching,
	camera effects, and client-side weapon mechanics
--]]

-- ==========================================
-- SERVICES AND DEPENDENCIES
-- ==========================================
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local ContextActionService = game:GetService("ContextActionService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

-- Player and Character References
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local camera = workspace.CurrentCamera
local humanoid: Humanoid = character:FindFirstChild("Humanoid") or character:WaitForChild("Humanoid")
local mouse = player:GetMouse()

-- Modules
local GunFeature = require(ReplicatedStorage.Modules.GunFeature)
local FPSGun = require(ReplicatedStorage.Modules.FPS.FPSGun)
local FPSPlayer = require(ReplicatedStorage.Modules.FPS.FPSPlayer)

-- Remote Events
local RemoteEvents = ReplicatedStorage.RemoteEvent
local ShootingRemote = RemoteEvents.Shooting
local ReloadingRemote = RemoteEvents.Reloading
local ChangeGunRemote = RemoteEvents.ChangeGun
local StateHandlerRemote = RemoteEvents.StateHandler

-- ==========================================
-- FRAMEWORK AND STATE TRACKING
-- ==========================================
local Framework = {
	viewmodel = nil,
	currentWeapon = nil,
	module = nil
}

-- Weapon Management
local Weapons = {}

-- State Variables
local States = {
	-- Shooting States
	IsShooting = false,
	CanShoot = true,
	ShootingDebounce = true,
	SemiShoot = false,
	LastShoot = os.clock(),

	-- Aiming States
	IsAiming = false,
	LastAimState = false,

	-- Reloading States
	IsReloading = false,
	LastChangeWeapon = os.clock(),
}

-- ==========================================
-- CAMERA EFFECT VARIABLES
-- ==========================================
local CameraEffects = {
	-- Aiming
	AimCF = CFrame.new(),

	-- Shooting
	ShootingCF = CFrame.new(),

	-- Walking/Movement
	WalkTiltCF = CFrame.new(),
	CamFollowCF = CFrame.new(),
	FollowOffset = Vector3.new(),

	-- Mouse Sway
	SwayCam = CFrame.new(),
	SwayRot = CFrame.new(),

	-- Camera Sway
	CurrentSwayAmount = 0.3,
	SwayAmount = 0.3,
	SwayCF = CFrame.new(),
	LastCameraCF = CFrame.new(),
	LastRotation = 0,
	RotationCF = CFrame.new()
}

-- ==========================================
-- CONFIGURATION
-- ==========================================
local CONFIG = {
	-- Gun Bindings
	GUN_BINDINGS = {
		[Enum.KeyCode.One] = "H&K HK33",
		[Enum.KeyCode.Two] = "BARRETT M98B",
		[Enum.KeyCode.Three] = "MOSSBERG M590A1"
	},

	-- Camera Settings
	DEFAULT_FOV = 70,

	-- Sway Settings
	MOUSE_SWAY_DIVISOR_CAM = 50,
	MOUSE_SWAY_DIVISOR_ROT = 150,
	MOUSE_SWAY_CLAMP = 0.3,
	ROTATION_SWAY_CLAMP = 0.03,

	-- Walk Tilt Settings
	MAX_WALK_TILT = math.rad(5), -- 5 degrees max tilt

	-- Lerp Speeds
	SWAY_LERP_SPEED = 0.1,
	AIM_LERP_SPEED = 0.1,
	WALK_TILT_LERP_SPEED = 0.1,
	CAMERA_SWAY_LERP_SPEED = 0.08
}

-- ==========================================
-- ANIMATION & EFFECT FUNCTIONS
-- ==========================================

--[[
	Handles mouse-based camera sway effects
--]]
local function UpdateMouseSway()
	local mouseDelta = UserInputService:GetMouseDelta()

	-- Camera sway
	local swayCamX = math.clamp(
		mouseDelta.X / CONFIG.MOUSE_SWAY_DIVISOR_CAM, 
		-CONFIG.MOUSE_SWAY_CLAMP, 
		CONFIG.MOUSE_SWAY_CLAMP
	)
	local swayCamY = math.clamp(
		mouseDelta.Y / CONFIG.MOUSE_SWAY_DIVISOR_CAM, 
		-CONFIG.MOUSE_SWAY_CLAMP, 
		CONFIG.MOUSE_SWAY_CLAMP
	)

	CameraEffects.SwayCam = CameraEffects.SwayCam:Lerp(
		CFrame.new(-swayCamX, swayCamY, 0), 
		CONFIG.SWAY_LERP_SPEED
	)

	-- Rotation sway
	local swayRotX = math.clamp(
		mouseDelta.X / CONFIG.MOUSE_SWAY_DIVISOR_ROT, 
		-CONFIG.ROTATION_SWAY_CLAMP, 
		CONFIG.ROTATION_SWAY_CLAMP
	)
	local swayRotY = math.clamp(
		mouseDelta.Y / CONFIG.MOUSE_SWAY_DIVISOR_ROT, 
		-CONFIG.ROTATION_SWAY_CLAMP, 
		CONFIG.ROTATION_SWAY_CLAMP
	)

	CameraEffects.SwayRot = CameraEffects.SwayRot:Lerp(
		CFrame.Angles(-swayRotY, -swayRotX, 0), 
		CONFIG.SWAY_LERP_SPEED
	)
end

--[[
	Handles walking tilt effect based on movement direction
--]]
local function UpdateWalkTilt()
	local currentHumanoid = humanoid
	if not currentHumanoid then return end

	local moveDirection = currentHumanoid.MoveDirection
	local relativeMove = camera.CFrame:VectorToObjectSpace(moveDirection)

	-- Calculate tilt based on left/right movement
	local tiltAmount = math.clamp(-relativeMove.X, -1, 1)
	local tiltAngle = tiltAmount * CONFIG.MAX_WALK_TILT

	CameraEffects.WalkTiltCF = CameraEffects.WalkTiltCF:Lerp(
		CFrame.Angles(0, 0, tiltAngle), 
		CONFIG.WALK_TILT_LERP_SPEED
	)
end

--[[
	Updates aiming effects including scope sway
--]]
local function UpdateAiming()
	if States.IsAiming then
		local currentGun = Weapons[Framework.currentWeapon]
		if not currentGun then return end

		local aimingValues = currentGun.AimingValues
		local swaySpeed = aimingValues.SWAY_SPEED
		local swayAmplitude = aimingValues.SWAY_AMPLITUDE
		local breathRate = aimingValues.BREATH_RATE

		-- Calculate aim offset
		local aimPart = Framework.viewmodel.Aimpart.CFrame
		local offset = aimPart:ToObjectSpace(Framework.viewmodel.PrimaryPart.CFrame)

		-- Apply natural sway simulation
		local time = os.clock()
		local swayX = math.sin(time * swaySpeed) * swayAmplitude
		local swayY = math.cos(time * breathRate * 0.5) * (swayAmplitude * 0.3)

		offset = offset * CFrame.new(swayX, swayY, 0)
		CameraEffects.AimCF = CameraEffects.AimCF:Lerp(offset, CONFIG.AIM_LERP_SPEED)

	elseif States.IsAiming ~= States.LastAimState then
		-- Handle aim state change
		States.LastAimState = States.IsAiming
		if States.IsAiming and Framework.module.CanZoom then
			ContextActionService:BindAction("Zoom", HandleZoom, false, Enum.KeyCode.E)
		else
			ContextActionService:UnbindAction("Zoom")
		end
	else
		-- Return to neutral position
		CameraEffects.AimCF = CameraEffects.AimCF:Lerp(CFrame.new(), CONFIG.AIM_LERP_SPEED)
	end
end

--[[
	Updates camera sway based on camera rotation
--]]
local function UpdateCameraSway()
	local rotationDifference = camera.CFrame:ToObjectSpace(CameraEffects.LastCameraCF)
	local x, y, z = rotationDifference:ToOrientation()

	CameraEffects.SwayCF = CameraEffects.SwayCF:Lerp(
		CFrame.Angles(
			math.sin(x) * CameraEffects.CurrentSwayAmount, 
			math.sin(y) * CameraEffects.CurrentSwayAmount, 
			0
		), 
		CONFIG.CAMERA_SWAY_LERP_SPEED
	)

	CameraEffects.LastCameraCF = camera.CFrame
end

-- ==========================================
-- UTILITY FUNCTIONS
-- ==========================================

--[[
	Safely gets the current humanoid
	@return Humanoid? - The humanoid if available
--]]
local function GetHumanoid(): Humanoid?
	if not player.Character then return nil end
	return player.Character:FindFirstChildOfClass("Humanoid")
end

--[[
	Checks if the player can currently shoot
	@return boolean - True if shooting is allowed
--]]
local function CanShoot(): boolean
	return not States.IsReloading 
		and States.ShootingDebounce 
		and Framework.viewmodel ~= nil
end

--[[
	Creates a gun configuration from a module
	@param gunName: string - Name of the gun
	@param gunModule: ModuleScript - The gun's module data
	@return table - Gun configuration
--]]
local function CreateGunConfig(gunName: string, gunModule: any): table
	return {
		Name = gunName,
		Damage = { 
			Body = gunModule.Bodyshot, 
			Head = gunModule.Headshot 
		},
		FireRate = gunModule.FireRate,
		Ammo = gunModule.Magazine,
		BulletsPerShot = gunModule.BulletPerShot,
		ReloadingTime = gunModule.ReloadingTime,
		AimingValues = gunModule.AimingValues,
		Recoil = gunModule.Recoil,
		SpreadAngles = {
			AimingSpreadAngle = gunModule.AimingSpreadAngle,
			SpreadAngle = gunModule.SpreadAngle,
			FiringSpreadAngle = gunModule.FiringSpreadAngle,
			MaxSpreadAngle = gunModule.MaxSpreadAngle,
			AngleReset = gunModule.AngleReset
		}
	}
end

-- ==========================================
-- WEAPON MANAGEMENT
-- ==========================================

--[[
	Loads a weapon and sets up the viewmodel
	@param weaponName: string - Name of the weapon to load
--]]
local function LoadGun(weaponName: string)
	local now = os.clock()

	if now - States.LastChangeWeapon <= .3 or Framework.currentWeapon == weaponName then return end

	States.LastChangeWeapon = now

	-- Clear existing viewmodels
	for _, child in pairs(camera:GetChildren()) do
		if child:IsA("Model") then
			child:Destroy()
		end
	end

	-- Get weapon module and viewmodel
	local weaponModule = ReplicatedStorage.Modules:FindFirstChild(weaponName)
	local viewmodel = ReplicatedStorage.Viewmodels:FindFirstChild(weaponName)

	if not weaponModule or not viewmodel then
		warn(`Failed to load weapon: {weaponName}`)
		return
	end

	local moduleData = require(weaponModule)
	local viewmodelClone = viewmodel:Clone()

	-- Create gun if it doesn't exist
	if not Weapons[weaponName] then
		local gunConfig = CreateGunConfig(weaponName, moduleData)
		Weapons[weaponName] = FPSGun.new(gunConfig)
	end

	-- Setup framework
	Framework.viewmodel = viewmodelClone
	Framework.viewmodel.Parent = camera
	Framework.module = moduleData
	Framework.currentWeapon = weaponName
end

-- ==========================================
-- SHOOTING SYSTEM
-- ==========================================

--[[
	Executes a single shot
--]]
local function ExecuteShot()
	local currentWeapon = Weapons[Framework.currentWeapon]
	if currentWeapon.Ammo <= 0 then return end

	-- Play shooting effects
	Framework.module.Shooting()

	-- Calculate muzzle position
	local shootingPartOffset = Framework.viewmodel.PrimaryPart.CFrame:ToObjectSpace(
		Framework.viewmodel.ShootingPart.CFrame
	)
	local muzzleCFrame = camera.CFrame * CameraEffects.AimCF * CameraEffects.ShootingCF * 
		CameraEffects.SwayCF * shootingPartOffset
	local muzzleWorldPos = muzzleCFrame.Position

	-- Fire remote events
	ShootingRemote:FireServer(muzzleWorldPos, Framework.viewmodel.Name, (muzzleWorldPos - mouse.Hit.Position).Unit, currentWeapon.Ammo)

	currentWeapon.Ammo -= 1

	-- Apply recoil effects
	GunFeature[Framework.module.Firing](Framework.module.Recoil, Framework.module.RecoilKick)

	-- Apply shooting cooldown
	States.ShootingDebounce = false
	States.LastShoot = os.clock()

	task.delay(Framework.module.FireRate, function()
		States.ShootingDebounce = true
	end)
end

-- ==========================================
-- INPUT HANDLING
-- ==========================================

--[[
	Handles zoom functionality
--]]
function HandleZoom(action: string, state: Enum.UserInputState, input: InputObject)
	if action ~= "Zoom" or state ~= Enum.UserInputState.Begin then return end

	local isCurrentlyZoomed = camera.FieldOfView == Framework.module.ZoomFieldOfView
	GunFeature.Zoom(
		Framework.module.ZoomFieldOfView,
		Framework.module.FieldOfView,
		not isCurrentlyZoomed
	)
end

--[[
	Handles weapon switching input
--]]
local function HandleWeaponSwitch(keyCode: Enum.KeyCode)
	local selectedWeapon = CONFIG.GUN_BINDINGS[keyCode]
	if selectedWeapon then
		ChangeGunRemote:FireServer(selectedWeapon,Framework.currentWeapon)
		LoadGun(selectedWeapon)
		return true
	end
	return false
end

--[[
	Handles reloading input
--]]
local function HandleReload()
	if States.IsReloading or not Framework.viewmodel then return end

	local currentWeapon = Weapons[Framework.currentWeapon]
	if not currentWeapon or currentWeapon.Ammo == currentWeapon.MaxAmmo then 
		return 
	end

	-- Fire reload start state
	StateHandlerRemote:FireServer("reload", {
		weaponName = Framework.currentWeapon,
		ammo = currentWeapon.Ammo})
	-- Start reload process
	currentWeapon:Reload()
	Framework.module.Reloading()

	States.IsReloading = true
	task.delay(Framework.module.ReloadingTime, function()
		States.IsReloading = false
	end)
end

--[[
	Handles aiming input
--]]
local function HandleAiming(isAiming: boolean)
	States.IsAiming = isAiming

	if isAiming then
		StateHandlerRemote:FireServer("aiming",{weaponName = Framework.currentWeapon})
		GunFeature.Aiming(Framework.module.FieldOfView)
	else
		StateHandlerRemote:FireServer("stop aiming",{weaponName = Framework.currentWeapon})
		GunFeature.Aiming(CONFIG.DEFAULT_FOV)
	end
end

-- ==========================================
-- EVENT CONNECTIONS
-- ==========================================

-- Mouse Input
mouse.Button1Down:Connect(function()
	if Framework.viewmodel then
		States.IsShooting = true
		StateHandlerRemote:FireServer("shootStart", Framework.currentWeapon)
	end
end)

mouse.Button1Up:Connect(function()
	if Framework.viewmodel then
		States.IsShooting = false
		StateHandlerRemote:FireServer("shootEnd", Framework.currentWeapon)
	end
end)

-- Keyboard Input
UserInputService.InputBegan:Connect(function(input: InputObject)
	-- Handle weapon switching
	if HandleWeaponSwitch(input.KeyCode) then return end

	-- Require viewmodel for other inputs
	if not Framework.viewmodel then return end

	-- Handle specific inputs
	if input.KeyCode == Enum.KeyCode.Q then
		HandleAiming(true)
	elseif input.KeyCode == Enum.KeyCode.R then
		HandleReload()
	end
end)

UserInputService.InputEnded:Connect(function(input: InputObject)
	if input.KeyCode == Enum.KeyCode.Q then
		HandleAiming(false)
	end
end)

-- ==========================================
-- MAIN RENDER LOOP
-- ==========================================

RunService.RenderStepped:Connect(function()
	if not Framework.viewmodel then return end

	-- Update all camera effects
	UpdateAiming()
	UpdateMouseSway()
	UpdateWalkTilt()

	-- Calculate final sway values
	local finalSway = CameraEffects.SwayRot * CameraEffects.SwayCam * CameraEffects.WalkTiltCF

	-- Apply special sway when aiming
	if States.IsAiming then
		UpdateCameraSway()
		finalSway = CameraEffects.SwayCF * CameraEffects.WalkTiltCF
	end

	-- Update viewmodel position
	if Framework.viewmodel and Framework.viewmodel.Parent == camera then
		Framework.viewmodel:SetPrimaryPartCFrame(
			camera.CFrame * CameraEffects.AimCF * CameraEffects.ShootingCF * finalSway
		)
	end
end)

-- ==========================================
-- SHOOTING LOOP
-- ==========================================

task.spawn(function()
	while task.wait() do
		if not States.IsShooting then
			States.SemiShoot = false
			continue
		end

		if not Framework.module then continue end

		local firingMode = Framework.module.Firing

		if firingMode == "Auto" and CanShoot() then
			ExecuteShot()
		elseif firingMode == "Semi" and CanShoot() and not States.SemiShoot then
			States.SemiShoot = true
			ExecuteShot()
		end
	end
end)

-- ==========================================
-- INITIALIZATION
-- ==========================================

-- Setup viewmodel collision
camera.ChildAdded:Connect(function(model: Instance)
	if model:IsA("Model") then
		for _, descendant in pairs(model:GetDescendants()) do
			if descendant:IsA("BasePart") then
				descendant.CanCollide = false
			end
		end
	end
end)
